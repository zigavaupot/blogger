![Oracle Analytics Bootcamp](https://github.com/zigavaupot/blogger/blob/main/semantic-modeler-series/images/oabootcamp-logo.png?raw=true)

In Oracle Analytics, calculations are a powerful way to create reusable business logic, KPIs, and metrics. These calculations live in the **logical layer** (**Business Model and Mapping**), where they can be defined once and reused across multiple dashboards and reports. 

So far, when we created a new **Business Model** in **Logical Layer** we defined measures in two ways:

- **Fact table** contains columns that are *natural* measures, such as *REVENUE* or *UNITS*.
- We can also use foreing key columns in a **Fact Table** to create *count* **measures**, such as *# of Orders* or *# of Distinct Customers*.

But of course, these are not the only **measures** we could create in our **Business Model**. **Calculations** or **Calculated Measures** are of course something that are *a must have*. They are usually included in **Facts**, but we can have calculated columns also in **Dimensions**. So let's take a look at **Facts** and **Calculated columns**.

Open **semantic model** we created and navigate to **Logical Layer**. Expand **business model** and click on **fact table** *F Revenue* to open table page.

![Open fact table page](https://github.com/zigavaupot/blogger/blob/main/semantic-modeler-series/calculations/images/open-fact-table-page.png?raw=true)

### Simple Measure Calculations

Analyzing existing measures, we can come to an idea to create additonal measures. For example, let's create the following measures:

- `Total Costs = Fixed Costs + Variable Costs`
- `Profit = Revenue - Total Costs`
- `Profit Margin % = Profit / Revenue * 100`

Adding a new measure starts with clicking on a **plus icon** next to *Search Columns* and **Creating New Column**

![Create New Column](https://github.com/zigavaupot/blogger/blob/main/semantic-modeler-series/calculations/images/create-new-column.png?raw=true)

One new row for a new column has been added into **Columns list**.

![New Column added](https://github.com/zigavaupot/blogger/blob/main/semantic-modeler-series/calculations/images/new-column-added.png?raw=true)

Click on **Details Icon** (located above the list):

![Details Icon](https://github.com/zigavaupot/blogger/blob/main/semantic-modeler-series/calculations/images/details-icon.png?raw=true)

Name a new column and then click **Logical Expression** in the **Sources** section.

![Check Logical Expression](https://github.com/zigavaupot/blogger/blob/main/semantic-modeler-series/calculations/images/check-logical-expression.png?raw=true)

Simple formulas can be entered directly into the field in the **Sources** section. However, you can also click the <img src="https://github.com/zigavaupot/blogger/blob/main/semantic-modeler-series/calculations/images/expression-editor-icon.png?raw=true" alt="Open Expression Editor Icon" width="24" height="24"> to open the **Expression Editor** for more complex calculations.

**Expression Editor** allows developers to properly format and validate formulas before storing them back into **Business Model**.

![Using Expression Editor](https://github.com/zigavaupot/blogger/blob/main/semantic-modeler-series/calculations/images/using-expression-editor.png?raw=true)

When formula is **validated** it can be saved and we can create additional calculations.

![Calculation - Total Costs](https://github.com/zigavaupot/blogger/blob/main/semantic-modeler-series/calculations/images/calculation-total-costs.png?raw=true)

We can now create additional two calculations (**Save** your model first!):

![Calculation - Profit](https://github.com/zigavaupot/blogger/blob/main/semantic-modeler-series/calculations/images/calculation-profit.png?raw=true)

![Calculation - Profit](https://github.com/zigavaupot/blogger/blob/main/semantic-modeler-series/calculations/images/calculation-profit-margin.png?raw=true)

**Note**: We can discuss wheater multiplying by 100 is required as we can use percent value display options in data visualisation where we can explicitly instruct to multiply value by 100 to calculate percents.

We have created now three measures which are now available to all users - there is no need for these users to create these measures in their reports.

Next, we will look into special types of calculations that are very often used - Time Series Calculations.

### Time Series Calculations

**Time Series Calculations** allow users to perform powerful period-based comparisons, such as Year-over-Year (YoY), Month-to-Date (MTD), Year-to-Date (YTD), and rolling period averages. These are built using time-series functions in the semantic model and rely on a properly defined Time Dimension.

We have created our two **Time Dimensions** and defined **Chronological Keys**, so both are ready to be used for **Time Series calculations**.

**Time Series calculations** supported in Oracle Analytics are:

- **AGO()**: Returns the value of a measure from a previous time period.
- **TODATE**: Accumulates values from the beginning of the period to the current point (e.g., MTD, YTD).
- **PERIODROLLING()**: Returns a rolling sum (or other aggregate) over a defined period window.

Let's create two measures first using **AGO()** and **TODATE()** for a measure *Revenue*. We will use *D Billing Date* as **time dimension** in this case.

We begin the same way as above by **creating a new column**. 

In **Expression Editor**, if we don't know the function syntax, we can look for it on the right side of editor.

![Expression Editor - Ago](https://github.com/zigavaupot/blogger/blob/main/semantic-modeler-series/calculations/images/expression-editor-ago.png?raw=true)

We can check in detail syntax and examples for selected expression. Double click on function from the list will copy syntax into **Expression** area.

![Expression Editor - Syntax](https://github.com/zigavaupot/blogger/blob/main/semantic-modeler-series/calculations/images/expression-editor-syntax.png?raw=true)

Enter required attributes for formula by using business model and its tables/columns. Specifically pay attention to the *TIME_LEVEL* which derives from time hierarchy in time dimension.

![Define and validate expression](https://github.com/zigavaupot/blogger/blob/main/semantic-modeler-series/calculations/images/define-and-validate-expression.png?raw=true)

In similar way, create a new time series measure *Revenue Year-to-Date*.

![TODATE expression](https://github.com/zigavaupot/blogger/blob/main/semantic-modeler-series/calculations/images/time-series-calculation-todate.png?raw=true)

Additionally, create *Revenue Year-over-Year* and *Revenue Year-over-Year Growth Index*.

![YoY calculation](https://github.com/zigavaupot/blogger/blob/main/semantic-modeler-series/calculations/images/calculation-year-over-year.png?raw=true)

![YoY calculation](https://github.com/zigavaupot/blogger/blob/main/semantic-modeler-series/calculations/images/calculation-year-over-year-idx.png?raw=true)

### Level-Based Measures

**Level-Based Measures** are a powerful feature in the Business Model (Logical Layer) that allow developers to create aggregated measures at a specific dimension level. Regardless of how the data is grouped in an analysis, these measures always apply and present data at required level.

A **Level-Based Measure** is a metric (i.e. *Revenue* or *Sales*) that is pre-aggregated at a specific hierarchy level — such as Year, Region, or Product Brand — instead of dynamically responding to the query level.

Let's create a *Total Anual Revenue* measure first. From its name we know that we need to **agreegate all revenues by all dimensions at the top level, except by Year**.

We are using **Physical Expression** in this case and not **Logical Expression** as we did in previous cases. We need to define which measure is *base* for our **level-based measure**. In our case, we are using *Revenue*. 

And then we have to specify the aggregation:

- select **Aggregation Rule** (*SUM* in this example)
- define levels for all dimensions - all **Logical Levels** are set to the top level except for the *D Billing Date* dimension where we set **Logical Level** to *Year*.

![Level-Based Measure - Year](https://github.com/zigavaupot/blogger/blob/main/semantic-modeler-series/calculations/images/level-based-measure-year.png?raw=true)

This is example how we can set a level-based measure which is used to calculate revenue shares by, let's say customer segments, where we need to have total revenue in a specific year to be used in denominator in the revenue share calculation by segments.

So let's add one more **level-based measure** which is simlar to the measure above, except it aggregates on *D Customer* dimension at *Customer Segment* level.

Instead of creating a new measure from scratch, we can simply duplicate existing column:

![Duplicate Column](https://github.com/zigavaupot/blogger/blob/main/semantic-modeler-series/calculations/images/duplicate-column.png?raw=true)

Now, we can change only those attributes that need changing:

![Level-Based Measure - Year/Customer Segment](https://github.com/zigavaupot/blogger/blob/main/semantic-modeler-series/calculations/images/level-based-measure-year-segment.png?raw=true)

### Expressions in Dimension Tables

We can create calculations/expressions also on columns in **Dimension Tables**. Let's take a look at example. 

*D Customer* logical table contains column *Birth Date*:

![Birth Date](https://github.com/zigavaupot/blogger/blob/main/semantic-modeler-series/calculations/images/d_customer-birth_date.png?raw=true)

Instead of using birth date, we might be better off with customer age in years. We can introduce a new column *Age* which will calculate actual customer's age based on the difference between *CURRENT_DATE* (this is predefined session variable) and *Birth Date*

We need to create a new column in *D Customer* first.

![Create a new column in dimension](https://github.com/zigavaupot/blogger/blob/main/semantic-modeler-series/calculations/images/create-new-column-in-dimension.png?raw=true)

Using **Expression Editor** we will use *TimeStampDiff* function to calculate difference between *CURRENT_DATE* and *Birth Date* which give *Age*.

![Calculate Age](https://github.com/zigavaupot/blogger/blob/main/semantic-modeler-series/calculations/images/calculate-age.png?raw=true)

Similarly, we could created additinal columns in **Dimension Tables**. This simple example shows that we are not constraint only on fact tables when creating calculations but we can use expression in dimensions as well.

### Updating Subject Area

We have now added some new measures. These measures are not reflected in our deployed **Subject Area**, so we need to make changes in **Presentation Layer** and deploy all of these changes to BI Server.

Therefore, open **Presentation Layer** first.

**Subject Area** *OA Bootcamp Subject Area* looks like this:

![Subject Area before update](https://github.com/zigavaupot/blogger/blob/main/semantic-modeler-series/calculations/images/subject-area-before-update.png?raw=true)

We have introduced several measures, therefore we would like to reorganize **presentation folder** *F Revenue*. First if we open *F Revenue* presentation table, it shows all columns, even though we don't need all of them. And there are some missing. 

First, we can delete columns that are not required. These columns are:

- TIME_BILL_DT
- TIME_PAID_DT
- ADDR_KEY

So, let's delete them.

![Delete Column from Presentation Table](https://github.com/zigavaupot/blogger/blob/main/semantic-modeler-series/calculations/images/delete-column.png?raw=true)

After deletion, *F Revenue* presentation table looks like this:

![Presentation Table after deletion](https://github.com/zigavaupot/blogger/blob/main/semantic-modeler-series/calculations/images/after-delete-columns.png?raw=true)

Let's reorganize *F Revenue* so we split measures that are *revenue* related, *profit* related and *counts*. We will create separate **presentation tables** for that:

- **Revenue Metrics**
- **Profit Metrics**
- **Counts**

Open **Subject Area page** and navigate to **Tables** tab. Click on **plus** icon to **create a new Presentation Table**.

![Create Presentation Table](https://github.com/zigavaupot/blogger/blob/main/semantic-modeler-series/calculations/images/create-presentation-table.png?raw=true)

Enter **presentation table** name *Profit Metrics* from the list above and click **Ok**. Repeat this for *Counts* as well.

![Create Presentation Table dialog](https://github.com/zigavaupot/blogger/blob/main/semantic-modeler-series/calculations/images/create-presentation-table-dialog.png?raw=true)

Rename *F Revenue* into *Revenue Metrics*.

Open *Profit Metrics*. We will now add all profit-related columns into this presentation table. Navigate into **Logical Layer** in the navigation pane on the left. Select all profit-related columns and drag them onto **Columns** area of *Profit Metrics* **presentation table page**.

![Profit Metrics Presentation table](https://github.com/zigavaupot/blogger/blob/main/semantic-modeler-series/calculations/images/profit-metrics-presentation-table.png?raw=true)

Let's repeat this and add all *# of ...* columns into *Counts* presentation table.

![Counts Presentation table](https://github.com/zigavaupot/blogger/blob/main/semantic-modeler-series/calculations/images/counts-presentation-table.png?raw=true)

Open *Revenue Metrics*. Remove columns that have been added to *Profit Metrics* or *Counts*, and after that add additional revenue-related metrics from logical layer.

![Revenue Metrics Presentation table](https://github.com/zigavaupot/blogger/blob/main/semantic-modeler-series/calculations/images/revenue-metrics-presentation-table.png?raw=true)

We have now created three presentation tables in our Subject Area. Nevertheless, we would like to keep Subject Area nice and tidy, so we will group these three presentation tables under one folder, let's call it *F Sales*.

First, let's create another new **Presentation Table** called *F Sales*.

![F Sales Presentation table](https://github.com/zigavaupot/blogger/blob/main/semantic-modeler-series/calculations/images/f_sales-presentation-table.png?raw=true)

Now, drag and drop all three previously created presentation tables: *Revenue Metrics*, *Profit Metrics* and *Counts*, onto *F Sales* presentation table.

![Subject Area reorganized](https://github.com/zigavaupot/blogger/blob/main/semantic-modeler-series/calculations/images/subject-area-reorganized.png?raw=true)

We can now **save** our model, run **consistency check** and **deploy** it.

Just to make sure, we can run **Advanced Consistency Check**.


![Advanced Check](https://github.com/zigavaupot/blogger/blob/main/semantic-modeler-series/calculations/images/advanced-check.png?raw=true)

Message that **Advanced Consistency Check** is running is displayed at bottom-right:

![Advanced Check Message](https://github.com/zigavaupot/blogger/blob/main/semantic-modeler-series/calculations/images/advanced-check-message.png?raw=true)

If check was successfully/unsuccessfully completed is also displayed at bottom-right. If successful, then let's deploy the model.

![Deploy Successful](https://github.com/zigavaupot/blogger/blob/main/semantic-modeler-series/calculations/images/deploy-successful.png?raw=true)

### Review and Test Changes

First test is checking if presentation tables are properly configured and displayed. We can see that we have now one folder *F Sales* and subfolders / presentation tables:

- *Revenue Metrics*
- *Profit Metrics*
- *Counts*

![New Subject Area](https://github.com/zigavaupot/blogger/blob/main/semantic-modeler-series/calculations/images/new-subject-area.png?raw=true)

More importantly is to test new metrics.

First test is to check simple calculations. 

![Simple Calculations Test](https://github.com/zigavaupot/blogger/blob/main/semantic-modeler-series/calculations/images/simple-calculations-test.png?raw=true)

We can see all measures *Total Costs*, *Profit* and *Profit Margin %* are calculated properly. 

Then let's check Time Series calculations.

![Time Series Calculations Test](https://github.com/zigavaupot/blogger/blob/main/semantic-modeler-series/calculations/images/time-series-calculations-test.png?raw=true)

Lastly, we have introduced **Level-Based Measures**:

![Level Based Measures Test](https://github.com/zigavaupot/blogger/blob/main/semantic-modeler-series/calculations/images/level-based-measures-test.png?raw=true)