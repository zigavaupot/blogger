### Metadata Management

Metadata management used to be one of the key strengths of Oracle Business Intelligence. Using BI Administration Tool developers were able to design and implement enterprise data models that were sitting on top of data warehouse data schemas.

OBIEE developer designs and develops a metadata model, a repository, using BI Administration Tool, which results in a RPD file. This binary file is then deployed on BI Server. BI Server is a component of Oracle Business Intelligence architecture and is responsible for processing user requests and data queries against underlying data sources.

![Oracle BI Server Architecture](https://github.com/zigavaupot/blogger/blob/main/embed-oac-into-apex/images/oracle-bi-server-architecture.png?raw=true)

BI Server uses metadata information from repository to perform the following two tasks:

* use logical SQL query and tranform it into corresponding query (ie. SQL, MDX), depending on the underlying data source (ie. Oracle Database, Microsoft SQL Server, Oracle Essbase, ...)
* transform and combine physical datasets retrieved and perform required calculations.

Typical metadata model consists of three layers:

**Physical layer**
Physical layer defines the objects and relationships that the Oracle BI Server required to write native queries against each physical data source. Developer defines connections to connect to data sources, importing tables (or possibly OLAP cubes or even flat files)from data sources.

The other important task is to define relationships between objects in the physical layer. Underlying database model can be dimensional, in 3rd normal form, flat files. It is not that important as long joins and relations between objects are defined. This is the base for query generation.

There are a few important things that you can do in physical layer. First, one physical table can be several times due to possibility to separate physical representation of objects from logical (aliases) that are being used in setting relations. This way,one physical table can be reused multiple times without replicating physical tables in the database.

Another really important feature is modeling aggregated data into same enterprise model. This gives developers possibility to use aggregates transparently - aggregates are used whenever conditions are met (ie. query on specified level). And this is completely hidden from the end-user.

**Business Model and Mapping layer**
This layer is often called also *Logical Layer. This layer defines the business or logical model of the data and specifies the mapping between the business model and the physical schemas. This layer determines business logic of analytical application which objects and relationships available to users that is easy to understand and to use by hiding the complexity of the source data models. Models that are accessible to end users are defined as star schemas.

Oracle BI Server evaluates logical SQL requests against the business model, and then uses the mappings to identify physical tables that are needed for query generation.

Business model defines all dimensional data including hierarchies.

**Presentation layer**
Presentation layer is often referred to as *Subject Area* (actually it contains several Subject Areas) presents customized, secure, role-based views of a business model to end users. It adds a level of abstraction on top of logical layer and provides the view of the data seen by end users.

As mentioned above, there can be several subject areas in presentation layer. These subject areas can map to one business model, and can be designed to enable analyses of particular business area.

![Oracle BI Repository Layers](https://github.com/zigavaupot/blogger/blob/main/embed-oac-into-apex/images/repository-layers.png?raw=true)

In my experience working with Oracle Business Intelligence (before) and Oracle Analytics (now) having single enterprise metadata model is one of the most important features of this product. It can support really diverse data warehouse arhcitectures from single data warehouse schema to distributed architectures running on technologically totally different server platform supporting one single analytical application, for example:

* most detailed granular data stored in a relational database (ie. Oracle Database),
* aggregated data stored in multidimensional OLAP database (ie. Oracle Essbase) and
* specific aggregations stored in in-memory database (ie. TimesTen).

All these in one single model, single application, complexity of the model completely hidden from the end user. There are not many tools out there to do that so efficiently.

