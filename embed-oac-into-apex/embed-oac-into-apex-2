### APEX Application

In this example, I created a straightforward APEX application to demonstrate how Oracle Analytics Cloud (OAC) can be embedded into an APEX environment. The application itself is simple, serving primarily as a container for the embedded analytics content.

![APEX Application Created](https://zigavaupot.github.io/blogger/embed-oac-into-apex/images/apex-application-created.png)

From the available pages, select **1 - Home**.

![APEX Application pages](https://zigavaupot.github.io/blogger/embed-oac-into-apex/images/apex-application-pages.png)

Within this page, a new region called `<body>` has been created. This region is where the main embedding takes place. While the application requires minimal coding overall, the integration involves specific configurations at two levels:
* The `<page>` level, where global JavaScript and variables are defined, and
* The `<body>` region, where the actual embedding of the OAC content occurs.

Letâ€™s first look at the `<page>` level. In the two fields labeled **File URLs** and **Function and Global Variable Declaration**, you should paste the code snippets provided under the **Developer** / **Embed** tab of the Data Visualization workbook (refer to the explanation above for details):

![Java Script](https://zigavaupot.github.io/blogger/embed-oac-into-apex/images/java-script.png)

![Page Level](https://zigavaupot.github.io/blogger/embed-oac-into-apex/images/page-level.png)

After completing the page-level setup, navigate to the `<body>` region.

In the **Identification** section, set the **Type** to *Static Content*.

In the **Source** section, enter the following HTML snippet into the *HTML Code* field:

```htm
<iframe src="https://<Oracle Analytics Cloud URL>.analytics.ocp.oraclecloud.com/ui/dv/ui/project.jsp?pageid=visualAnalyzer&viewermode=true&noheader=true&reportmode=full&reportpath=%2F%40Catalog%2Fshared%2FDemos%2FCEO%20Dashboard%20(Sales)"  width="1200px" height="900px" frameborder="0"></iframe>
```

I initially attempted to use the code snippet provided under the **Developer** tab that utilizes the `<oracle-dv>` custom element, but I was unable to get it to work. Any suggestions on what I might have missed or done incorrectly are more than welcome!

Here is the snippet that should have worked but did not:

```htm
<div style='width: 1200px; height: 900px'>
<oracle-dv project-path="/@Catalog/shared/Demos/CEO Dashboard (Sales)" active-page="insight" active-tab-id="snapshot!canvas!1">
</oracle-dv>
</div>
```

Since the `<iframe>`-based solution worked reliably, I decided to postpone troubleshooting the `<oracle-dv>` approach for now.

At this point, you might expect that embedding Oracle Analytics Cloud Data Visualization directly within an APEX application would be straightforward. Indeed, several blog posts claim this integration works seamlessly. **However, if you try to run your application now, it will not function as expected.** This is because APEX uses its own authentication mechanism, while Oracle Analytics Cloud relies on Oracle Identity Cloud Service (IDCS). These two authentication systems are not integrated by default, which prevents the embedded content from loading properly.

In summary, while it is possible to embed OAC content within an APEX application using an `<iframe>`, resolving the authentication challenge between APEX and Oracle Analytics Cloud is essential for a fully functional integration. Addressing this will be the next critical step in enabling seamless embedding and user experience.