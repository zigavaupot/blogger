### Update OracleIdentityCloud domain

In this section, we'll walk through creating a new user group for users who need access to data visualization workbooks in Oracle Analytics. This step is optional if the user group already exists.

![Create a new user group](https://zigavaupot.github.io/blogger/embed-oac-into-apex/images/create-a-new-user-group.png)

Next, assign the newly created group access to the analytics instance. In this example, we assign the **ServiceAdministrator** application role to the new group, though this role can be adjusted as needed.

![Assign group to Analytics service](https://zigavaupot.github.io/blogger/embed-oac-into-apex/images/assign-group-to-analytics-service.png)

Finally, let's create a new application under **Integrated Applications**. This involves two key parts:
* Configuring the APEX application, and
* Setting up OAuth.

When creating a new application, select **Confidential Application**.

![Add confidential application](https://zigavaupot.github.io/blogger/embed-oac-into-apex/images/add-confidential-application.png)

Follow the wizard to guide you through the process of setting up the new application.

![Create Integrated application](https://zigavaupot.github.io/blogger/embed-oac-into-apex/images/create-integrated-application.png)

Important entries to note:

* In the **URLs** section, enter the APEX application URL as the **Application URL**.

![Application URL](https://zigavaupot.github.io/blogger/embed-oac-into-apex/images/application-url.png)

* In the **Authentication and Authorization** section, check **Enforce grants as authorization**.

![Enforce grants as authorization](https://zigavaupot.github.io/blogger/embed-oac-into-apex/images/enforce-grants-as-authorization.png)

When setting up OAuth, use the following configurations:

* For **Resource Server Configuration**, select **No resource server configuration**.

* For **Client Configuration**, select **Configure this application as a client now**.
    + Check the **Authorization code** checkbox.
    + Set the **Redirect URL** to:
        ```htm
        https://<APEX instance URL>.adb.eu-frankfurt-1.oraclecloudapps.com/ords/apex_authentication.callback
        ```
    + Set the **Post-logout redirect URL** to:
        ```htm
        https://<APEX instance URL>.adb.eu-frankfurt-1.oraclecloudapps.com/ords/r/apexdemo/embed-oac-into-apex-application/home
        ```
        ![Client configuration -1 ](https://zigavaupot.github.io/blogger/embed-oac-into-apex/images/client-configuration.png)

    + Check **Add resources** and add your analytics service to the resource list. This is necessary to enable API access for the Oracle Analytics application.

    ![Client configuration - 2](https://zigavaupot.github.io/blogger/embed-oac-into-apex/images/client-configuration-2.png)

One more important detail: each application provides two key variablesâ€”**Client ID** and **Client Secret**. These will be required in the next step when creating **Web Credentials**.

You can find **Client ID** and **Client Secret** in the **OAuth Configuration** section under **General Information**.

![Client ID and Client Secret](https://zigavaupot.github.io/blogger/embed-oac-into-apex/images/client-id-and-client-secret.png)

### Web Credentials

To enable your APEX application to access other applications, create **Web Credentials** using the **Client ID** and **Client Secret** obtained earlier.

Navigate to the **App Builder** page in APEX and select **Workspace Utilities**.

![Workspace Utilities](https://zigavaupot.github.io/blogger/embed-oac-into-apex/images/workspace-utilities.png)

From the list of utilities, choose **Web Credentials**.

![Web Credentials](https://zigavaupot.github.io/blogger/embed-oac-into-apex/images/web-credentials.png)

On the **Web Credentials** page, provide the following information alongside *Name* and *Static ID*:

* **Authentication Type**: select *Basic Authentication*.
* Enter the *Client ID* in the **Client ID or Username** field.
* Enter the *Client Secret* in the **Client Secret or Password** field. Re-enter the **Client Secret** in the **Verify Client Secret or Password** field.

![Create Web Credentials](https://zigavaupot.github.io/blogger/embed-oac-into-apex/images/create-web-credentials.png)

### Create Authentication Scheme

The final step in this configuration is to create an Authentication Scheme. Several sections require configuration:

* **Name**

Provide a name for the **Authentication Scheme** and select *Social Sign-in* for the **Scheme Type**.

![Authentication Scheme - Settings](https://zigavaupot.github.io/blogger/embed-oac-into-apex/images/authentication-scheme-settings.png)

* **Settings**

Under **Settings**, select the **Credentials Store** created in the previous **Web Credentials** step.

Choose *OpenID Connect Provider* for **Authentication Provider**.

For the **Discovery URL**, enter:

```htm
https://<Identity Domain URL>.identity.oraclecloud.com/.well-known/openid-configuration
```

You can find the IDCS Domain URL on the Identity Domain page:

![Identity Domain URL](https://zigavaupot.github.io/blogger/embed-oac-into-apex/images/identity-domain-url.png)

Use the Domain URL and append `/.well-known/openid-configuration` to complete the **Discovery URL**.

Enter *profile* in the **Scope** field and *sub* in the **Username** field.

* **Post Log-in Processing**

Select *URL* for **Go to** and enter the APEX application URL in the **URL** field.

![Identity Domain URL](https://zigavaupot.github.io/blogger/embed-oac-into-apex/images/authentication-schema-post-login.png)

### Almost Ready to Go!

Before going live, update the **Security Attributes** under **Shared Components**.

![Security Attributes](https://zigavaupot.github.io/blogger/embed-oac-into-apex/images/security-attributes.png)

Update the following fields and apply the changes:

* In the **Authentication** section:
    + Leave *APEX_PUBLIC_USER* as the **Public User**.
    + Select the **Authentication Scheme** created in the previous step.

* In the **Authorization** section:
    + Choose *No application authorization required* for the **Authorization Scheme**.
    + Choose *Custom Code* for the **Source for Roles or Group Schemes**.

![Apply Security Attributes](https://zigavaupot.github.io/blogger/embed-oac-into-apex/images/apply-security-attributes.png)

### Run APEX Application

You are now ready to run the application:

![Run Application](https://zigavaupot.github.io/blogger/embed-oac-into-apex/images/run-application.png)

Alternatively, enter the following URL in your browser to access the APEX application:

```htm
https://<APEX instance URL>.adb.eu-frankfurt-1.oraclecloudapps.com/ords/r/apexdemo/embed-oac-into-apex-application/home
```

![Embed OAC into APEX Application](https://zigavaupot.github.io/blogger/embed-oac-into-apex/images/running-application.png)

### Conclusion

This exercise demonstrates how to integrate Oracle Analytics Cloud with an APEX application through careful configuration of user groups, OAuth settings, web credentials, and authentication schemes. While the process involves multiple steps, it primarily consists of configuration tasks that ensure secure and seamless access between the applications.

Throughout this process, I gained valuable hands-on experience creating my first APEX application and integrating it with Oracle Analytics. Although the tools have evolved since the days of WebDB and Oracle Portal, this exercise highlights the power and flexibility of modern Oracle Cloud services.

I hope this guide serves as a helpful resource for others looking to achieve similar integrations. Future posts will explore additional use cases, including integrating Oracle Analytics Server with APEX in on-premises environments. As always, feedback and comments are welcome via my private email.
